var KGZ1bmN = `KGZ1bmN0aW9uKCkgewogICJ1c2Ugc3RyaWN0IjsKCiAgLyoqCiAgICogRWFzeSBzZWxlY3RvciBoZWxwZXIgZnVuY3Rpb24KICAgKi8KICBjb25zdCBzZWxlY3QgPSAoZWwsIGFsbCA9IGZhbHNlKSA9PiB7CiAgICBlbCA9IGVsLnRyaW0oKQogICAgaWYgKGFsbCkgewogICAgICByZXR1cm4gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWwpXQogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpCiAgICB9CiAgfQoKICAvKioKICAgKiBFYXN5IGV2ZW50IGxpc3RlbmVyIGZ1bmN0aW9uCiAgICovCiAgY29uc3Qgb24gPSAodHlwZSwgZWwsIGxpc3RlbmVyLCBhbGwgPSBmYWxzZSkgPT4gewogICAgbGV0IHNlbGVjdEVsID0gc2VsZWN0KGVsLCBhbGwpCiAgICBpZiAoc2VsZWN0RWwpIHsKICAgICAgaWYgKGFsbCkgewogICAgICAgIHNlbGVjdEVsLmZvckVhY2goZSA9PiBlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpKQogICAgICB9IGVsc2UgewogICAgICAgIHNlbGVjdEVsLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpCiAgICAgIH0KICAgIH0KICB9CgogIC8qKgogICAqIEVhc3kgb24gc2Nyb2xsIGV2ZW50IGxpc3RlbmVyIAogICAqLwogIGNvbnN0IG9uc2Nyb2xsID0gKGVsLCBsaXN0ZW5lcikgPT4gewogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgbGlzdGVuZXIpCiAgfQoKICAvKioKICAgKiBOYXZiYXIgbGlua3MgYWN0aXZlIHN0YXRlIG9uIHNjcm9sbAogICAqLwogIGxldCBuYXZiYXJsaW5rcyA9IHNlbGVjdCgnI25hdmJhciAuc2Nyb2xsdG8nLCB0cnVlKQogIGNvbnN0IG5hdmJhcmxpbmtzQWN0aXZlID0gKCkgPT4gewogICAgbGV0IHBvc2l0aW9uID0gd2luZG93LnNjcm9sbFkgKyAyMDAKICAgIG5hdmJhcmxpbmtzLmZvckVhY2gobmF2YmFybGluayA9PiB7CiAgICAgIGlmICghbmF2YmFybGluay5oYXNoKSByZXR1cm4KICAgICAgbGV0IHNlY3Rpb24gPSBzZWxlY3QobmF2YmFybGluay5oYXNoKQogICAgICBpZiAoIXNlY3Rpb24pIHJldHVybgogICAgICBpZiAocG9zaXRpb24gPj0gc2VjdGlvbi5vZmZzZXRUb3AgJiYgcG9zaXRpb24gPD0gKHNlY3Rpb24ub2Zmc2V0VG9wICsgc2VjdGlvbi5vZmZzZXRIZWlnaHQpKSB7CiAgICAgICAgbmF2YmFybGluay5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKQogICAgICB9IGVsc2UgewogICAgICAgIG5hdmJhcmxpbmsuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJykKICAgICAgfQogICAgfSkKICB9CiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBuYXZiYXJsaW5rc0FjdGl2ZSkKICBvbnNjcm9sbChkb2N1bWVudCwgbmF2YmFybGlua3NBY3RpdmUpCgogIC8qKgogICAqIFNjcm9sbHMgdG8gYW4gZWxlbWVudCB3aXRoIGhlYWRlciBvZmZzZXQKICAgKi8KICBjb25zdCBzY3JvbGx0byA9IChlbCkgPT4gewogICAgbGV0IGhlYWRlciA9IHNlbGVjdCgnI2hlYWRlcicpCiAgICBsZXQgb2Zmc2V0ID0gaGVhZGVyLm9mZnNldEhlaWdodAoKICAgIGxldCBlbGVtZW50UG9zID0gc2VsZWN0KGVsKS5vZmZzZXRUb3AKICAgIHdpbmRvdy5zY3JvbGxUbyh7CiAgICAgIHRvcDogZWxlbWVudFBvcyAtIG9mZnNldCwKICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnCiAgICB9KQogIH0KCiAgLyoqCiAgICogVG9nZ2xlIC5oZWFkZXItc2Nyb2xsZWQgY2xhc3MgdG8gI2hlYWRlciB3aGVuIHBhZ2UgaXMgc2Nyb2xsZWQKICAgKi8KICBsZXQgc2VsZWN0SGVhZGVyID0gc2VsZWN0KCcjaGVhZGVyJykKICBpZiAoc2VsZWN0SGVhZGVyKSB7CiAgICBjb25zdCBoZWFkZXJTY3JvbGxlZCA9ICgpID0+IHsKICAgICAgaWYgKHdpbmRvdy5zY3JvbGxZID4gMTAwKSB7CiAgICAgICAgc2VsZWN0SGVhZGVyLmNsYXNzTGlzdC5hZGQoJ2hlYWRlci1zY3JvbGxlZCcpCiAgICAgIH0gZWxzZSB7CiAgICAgICAgc2VsZWN0SGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2hlYWRlci1zY3JvbGxlZCcpCiAgICAgIH0KICAgIH0KICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgaGVhZGVyU2Nyb2xsZWQpCiAgICBvbnNjcm9sbChkb2N1bWVudCwgaGVhZGVyU2Nyb2xsZWQpCiAgfQoKICAvKioKICAgKiBCYWNrIHRvIHRvcCBidXR0b24KICAgKi8KICBsZXQgYmFja3RvdG9wID0gc2VsZWN0KCcuYmFjay10by10b3AnKQogIGlmIChiYWNrdG90b3ApIHsKICAgIGNvbnN0IHRvZ2dsZUJhY2t0b3RvcCA9ICgpID0+IHsKICAgICAgaWYgKHdpbmRvdy5zY3JvbGxZID4gMTAwKSB7CiAgICAgICAgYmFja3RvdG9wLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpCiAgICAgIH0gZWxzZSB7CiAgICAgICAgYmFja3RvdG9wLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpCiAgICAgIH0KICAgIH0KICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdG9nZ2xlQmFja3RvdG9wKQogICAgb25zY3JvbGwoZG9jdW1lbnQsIHRvZ2dsZUJhY2t0b3RvcCkKICB9CgogIC8qKgogICAqIE1vYmlsZSBuYXYgdG9nZ2xlCiAgICovCiAgb24oJ2NsaWNrJywgJy5tb2JpbGUtbmF2LXRvZ2dsZScsIGZ1bmN0aW9uKGUpIHsKICAgIHNlbGVjdCgnI25hdmJhcicpLmNsYXNzTGlzdC50b2dnbGUoJ25hdmJhci1tb2JpbGUnKQogICAgdGhpcy5jbGFzc0xpc3QudG9nZ2xlKCdiaS1saXN0JykKICAgIHRoaXMuY2xhc3NMaXN0LnRvZ2dsZSgnYmkteCcpCiAgfSkKCiAgLyoqCiAgICogTW9iaWxlIG5hdiBkcm9wZG93bnMgYWN0aXZhdGUKICAgKi8KICBvbignY2xpY2snLCAnLm5hdmJhciAuZHJvcGRvd24gPiBhJywgZnVuY3Rpb24oZSkgewogICAgaWYgKHNlbGVjdCgnI25hdmJhcicpLmNsYXNzTGlzdC5jb250YWlucygnbmF2YmFyLW1vYmlsZScpKSB7CiAgICAgIGUucHJldmVudERlZmF1bHQoKQogICAgICB0aGlzLm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QudG9nZ2xlKCdkcm9wZG93bi1hY3RpdmUnKQogICAgfQogIH0sIHRydWUpCgogIC8qKgogICAqIFNjcm9vbCB3aXRoIG9mc2V0IG9uIGxpbmtzIHdpdGggYSBjbGFzcyBuYW1lIC5zY3JvbGx0bwogICAqLwogIG9uKCdjbGljaycsICcuc2Nyb2xsdG8nLCBmdW5jdGlvbihlKSB7CiAgICBpZiAoc2VsZWN0KHRoaXMuaGFzaCkpIHsKICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpCgogICAgICBsZXQgbmF2YmFyID0gc2VsZWN0KCcjbmF2YmFyJykKICAgICAgaWYgKG5hdmJhci5jbGFzc0xpc3QuY29udGFpbnMoJ25hdmJhci1tb2JpbGUnKSkgewogICAgICAgIG5hdmJhci5jbGFzc0xpc3QucmVtb3ZlKCduYXZiYXItbW9iaWxlJykKICAgICAgICBsZXQgbmF2YmFyVG9nZ2xlID0gc2VsZWN0KCcubW9iaWxlLW5hdi10b2dnbGUnKQogICAgICAgIG5hdmJhclRvZ2dsZS5jbGFzc0xpc3QudG9nZ2xlKCdiaS1saXN0JykKICAgICAgICBuYXZiYXJUb2dnbGUuY2xhc3NMaXN0LnRvZ2dsZSgnYmkteCcpCiAgICAgIH0KICAgICAgc2Nyb2xsdG8odGhpcy5oYXNoKQogICAgfQogIH0sIHRydWUpCgogIC8qKgogICAqIFNjcm9sbCB3aXRoIG9mc2V0IG9uIHBhZ2UgbG9hZCB3aXRoIGhhc2ggbGlua3MgaW4gdGhlIHVybAogICAqLwogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4gewogICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5oYXNoKSB7CiAgICAgIGlmIChzZWxlY3Qod2luZG93LmxvY2F0aW9uLmhhc2gpKSB7CiAgICAgICAgc2Nyb2xsdG8od2luZG93LmxvY2F0aW9uLmhhc2gpCiAgICAgIH0KICAgIH0KICB9KTsKCiAgLyoqCiAgICogUHJlbG9hZGVyCiAgICovCiAgbGV0IHByZWxvYWRlciA9IHNlbGVjdCgnI3ByZWxvYWRlcicpOwogIGlmIChwcmVsb2FkZXIpIHsKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4gewogICAgICBwcmVsb2FkZXIucmVtb3ZlKCkKICAgIH0pOwogIH0KCiAgLyoqCiAgICogSW5pdGlhdGUgIGdsaWdodGJveCAKICAgKi8KICBjb25zdCBnbGlnaHRib3ggPSBHTGlnaHRib3goewogICAgc2VsZWN0b3I6ICcuZ2xpZ2h0Ym94JwogIH0pOwoKICAvKioKICAgKiBTa2lsbHMgYW5pbWF0aW9uCiAgICovCiAgbGV0IHNraWxzQ29udGVudCA9IHNlbGVjdCgnLnNraWxscy1jb250ZW50Jyk7CiAgaWYgKHNraWxzQ29udGVudCkgewogICAgbmV3IFdheXBvaW50KHsKICAgICAgZWxlbWVudDogc2tpbHNDb250ZW50LAogICAgICBvZmZzZXQ6ICc4MCUnLAogICAgICBoYW5kbGVyOiBmdW5jdGlvbihkaXJlY3Rpb24pIHsKICAgICAgICBsZXQgcHJvZ3Jlc3MgPSBzZWxlY3QoJy5wcm9ncmVzcyAucHJvZ3Jlc3MtYmFyJywgdHJ1ZSk7CiAgICAgICAgcHJvZ3Jlc3MuZm9yRWFjaCgoZWwpID0+IHsKICAgICAgICAgIGVsLnN0eWxlLndpZHRoID0gZWwuZ2V0QXR0cmlidXRlKCdhcmlhLXZhbHVlbm93JykgKyAnJScKICAgICAgICB9KTsKICAgICAgfQogICAgfSkKICB9CgogIC8qKgogICAqIFBvcmZvbGlvIGlzb3RvcGUgYW5kIGZpbHRlcgogICAqLwogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4gewogICAgbGV0IHBvcnRmb2xpb0NvbnRhaW5lciA9IHNlbGVjdCgnLnBvcnRmb2xpby1jb250YWluZXInKTsKICAgIGlmIChwb3J0Zm9saW9Db250YWluZXIpIHsKICAgICAgbGV0IHBvcnRmb2xpb0lzb3RvcGUgPSBuZXcgSXNvdG9wZShwb3J0Zm9saW9Db250YWluZXIsIHsKICAgICAgICBpdGVtU2VsZWN0b3I6ICcucG9ydGZvbGlvLWl0ZW0nCiAgICAgIH0pOwoKICAgICAgbGV0IHBvcnRmb2xpb0ZpbHRlcnMgPSBzZWxlY3QoJyNwb3J0Zm9saW8tZmx0ZXJzIGxpJywgdHJ1ZSk7CgogICAgICBvbignY2xpY2snLCAnI3BvcnRmb2xpby1mbHRlcnMgbGknLCBmdW5jdGlvbihlKSB7CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHBvcnRmb2xpb0ZpbHRlcnMuZm9yRWFjaChmdW5jdGlvbihlbCkgewogICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnZmlsdGVyLWFjdGl2ZScpOwogICAgICAgIH0pOwogICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnZmlsdGVyLWFjdGl2ZScpOwoKICAgICAgICBwb3J0Zm9saW9Jc290b3BlLmFycmFuZ2UoewogICAgICAgICAgZmlsdGVyOiB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1maWx0ZXInKQogICAgICAgIH0pOwogICAgICAgIHBvcnRmb2xpb0lzb3RvcGUub24oJ2FycmFuZ2VDb21wbGV0ZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgQU9TLnJlZnJlc2goKQogICAgICAgIH0pOwogICAgICB9LCB0cnVlKTsKICAgIH0KCiAgfSk7CgogIC8qKgogICAqIEluaXRpYXRlIHBvcnRmb2xpbyBsaWdodGJveCAKICAgKi8KICBjb25zdCBwb3J0Zm9saW9MaWdodGJveCA9IEdMaWdodGJveCh7CiAgICBzZWxlY3RvcjogJy5wb3J0Zm9saW8tbGlnaHRib3gnCiAgfSk7CgogIC8qKgogICAqIFBvcnRmb2xpbyBkZXRhaWxzIHNsaWRlcgogICAqLwogIG5ldyBTd2lwZXIoJy5wb3J0Zm9saW8tZGV0YWlscy1zbGlkZXInLCB7CiAgICBzcGVlZDogNDAwLAogICAgbG9vcDogdHJ1ZSwKICAgIGF1dG9wbGF5OiB7CiAgICAgIGRlbGF5OiA1MDAwLAogICAgICBkaXNhYmxlT25JbnRlcmFjdGlvbjogZmFsc2UKICAgIH0sCiAgICBwYWdpbmF0aW9uOiB7CiAgICAgIGVsOiAnLnN3aXBlci1wYWdpbmF0aW9uJywKICAgICAgdHlwZTogJ2J1bGxldHMnLAogICAgICBjbGlja2FibGU6IHRydWUKICAgIH0KICB9KTsKCiAgLyoqCiAgICogQW5pbWF0aW9uIG9uIHNjcm9sbAogICAqLwogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4gewogICAgQU9TLmluaXQoewogICAgICBkdXJhdGlvbjogMTAwMCwKICAgICAgZWFzaW5nOiAiZWFzZS1pbi1vdXQiLAogICAgICBvbmNlOiB0cnVlLAogICAgICBtaXJyb3I6IGZhbHNlCiAgICB9KTsKICB9KTsKCn0pKCk=`;
eval(atob(KGZ1bmN));
